package com.onemore.msnaves.naves.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.onemore.msnaves.db.naves.Usuario;
import com.onemore.msnaves.db.naves.UsuariosRepository;
import com.onemore.msnaves.generic.GenericService;
import com.onemore.msnaves.mensajes.service.MensajesService;

@Service
public class UsuariosService extends GenericService<Usuario, Integer> implements IUsuariosService {
	
	private final UsuariosRepository usuariosRepository;
	private final MensajesService mensajesService;

	public UsuariosService(UsuariosRepository usuariosRepository, MensajesService mensajesService) {
    	super(usuariosRepository);
        this.usuariosRepository = usuariosRepository;
        this.mensajesService = mensajesService;
	}
    
	// Métodos existentes
	
	@Override
	public List<Usuario> getAll() {
		mensajesService.send("[" + LocalDate.now() + "] - " + "Se ha llamado a getAll");
        //return repository.findAll();
		return usuariosRepository.findAllByOrderByIdAsc();
    }

	@Override
    public Optional<Usuario> getById(Integer id) {
		mensajesService.send("[" + LocalDate.now() + "] - " + "Se ha llamado a getById");
        return repository.findById(id);
    }

	@Override
    public Usuario create(Usuario entity) {
		mensajesService.send("[" + LocalDate.now() + "] - " + "Se ha llamado a create");
        return repository.save(entity);
    }
    
    @Override
    public Usuario update(Integer id, Usuario entity) {
    	mensajesService.send("[" + LocalDate.now() + "] - " + "Se ha llamado a update");
		Usuario existingEntity = usuariosRepository.findById(id)
                .orElseThrow(() -> new RuntimeException(entity.getClass().getSimpleName() + " not found with id: " + id));
        
		existingEntity.setNombre(entity.getNombre());

		return usuariosRepository.save(existingEntity);
	}
    
    @Override
    public void delete(Integer id) {
    	mensajesService.send("[" + LocalDate.now() + "] - " + "Se ha llamado a delete");
    	mensajesService.sendEliminacionUsuario(id.toString());
    	Usuario entityToDelete = repository.findById(id)
                .orElseThrow(() -> new RuntimeException("Entity not found with id: " + id));
        repository.delete(entityToDelete);
    }

    // Nuevos métodos
    
    public List<Usuario> findByNick(String nick) {
    	mensajesService.send("[" + LocalDate.now() + "] - " + "Se ha llamado a findByNick");
    	return usuariosRepository.findByNick(nick);
	}
    
}
