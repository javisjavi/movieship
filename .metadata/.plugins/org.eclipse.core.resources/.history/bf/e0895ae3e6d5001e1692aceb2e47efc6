package com.onemore.msnaves.naves.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.onemore.msnaves.db.naves.Nave;
import com.onemore.msnaves.db.naves.NaveDto;
import com.onemore.msnaves.db.naves.NavesMapper;
import com.onemore.msnaves.generic.PaginationRequest;
import com.onemore.msnaves.naves.service.NavesService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/naves")
@Api(value = "Naves Management System", tags = "Naves")
public class NavesApi {

    @Autowired
    private NavesService navesService;

    @ApiOperation(value = "Obtener todas las naves", response = ResponseEntity.class)
    @GetMapping
    public ResponseEntity<List<Nave>> getAllNaves() {
        try {
            List<Nave> naves = navesService.getAll();
            return new ResponseEntity<>(naves, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @ApiOperation(value = "Obtener todas las naves paginadas", response = ResponseEntity.class)
    @PostMapping("/paginated")
    public ResponseEntity<List<Nave>> getAllNaves(@RequestBody PaginationRequest paginationRequest) {
        try {
            PageRequest pageRequest = PageRequest.of(paginationRequest.getPageNumber(), paginationRequest.getPageSize());
            List<Nave> navesPaginated = navesService.getAllPaginated(pageRequest);
            return new ResponseEntity<>(navesPaginated, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @ApiOperation(value = "Obtener una nave por su ID", response = ResponseEntity.class)
    @GetMapping("/{id}")
    public ResponseEntity<Nave> getNaveById(@PathVariable("id") Integer id) {
        try {
            Optional<Nave> nave = navesService.getById(id);
            if (nave.isPresent()) {
                return new ResponseEntity<>(nave.get(), HttpStatus.OK);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @ApiOperation(value = "Crear una nueva nave", response = ResponseEntity.class)
    @PostMapping
    public ResponseEntity<Nave> createNave(@RequestBody NaveDto naveDto) {
        try {
            Nave createdNave = navesService.create(NavesMapper.INSTANCE.toEntity(naveDto));
            return new ResponseEntity<>(createdNave, HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @ApiOperation(value = "Actualizar una nave por su ID", response = ResponseEntity.class)
    @PutMapping("/{id}")
    public ResponseEntity<Nave> updateNave(@PathVariable("id") Integer id, @RequestBody NaveDto naveDto) {
        try {
            Nave updatedNave = navesService.update(id, NavesMapper.INSTANCE.toEntity(naveDto));
            return new ResponseEntity<>(updatedNave, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @ApiOperation(value = "Eliminar una nave por su ID", response = ResponseEntity.class)
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteNave(@PathVariable("id") Integer id) {
        try {
            navesService.delete(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @ApiOperation(value = "Buscar una nave por su nombre", response = ResponseEntity.class)
    @GetMapping("/nombre/{nombre}")
    public ResponseEntity<List<Nave>> getNaveByNombre(@PathVariable("nombre") String nombre) {
        try {
            List<Nave> naves = navesService.findByPartialNombre(nombre);
            if (!naves.isEmpty()) {
                return new ResponseEntity<>(naves, HttpStatus.OK);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @ApiOperation(value = "Prueba de estado del servicio", response = HttpStatus.class)
    @GetMapping("/test")
    public HttpStatus test() {
        
        try {
        	return HttpStatus.OK;
        } catch (Exception e) {
        	return HttpStatus.INTERNAL_SERVER_ERROR;
        }
    }
}
